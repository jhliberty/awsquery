#!/usr/bin/env ruby

require 'rubygems'
require 'fog'
require 'optparse'
require 'json/pure'

options = {
  :default_key => 'Name',
  :state => 'running',
  :verbose => false,
  :json => false,
}

module AwsOptions extend self
  def access_key_id
    ENV['ACCESS_KEY_ID'] || credentials['AWSAccessKeyId']
  end

  def secret_access_key
    ENV['SECRET_ACCESS_KEY'] || credentials['AWSSecretKey']
  end

  def credentials
    @credentials ||= load_credentials ENV['AWS_CREDENTIAL_FILE']
  end

  def load_credentials(filename)
    File.read(filename).lines.inject({}) do |m, line|
      k, v = line.chomp.split("=", 2)
      m.tap { |m| m[k] = v }
    end
  end
end

OptionParser.new do |opts|
  opts.banner = "Usage: awsquery.rb [options]"
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  opts.on("-s", "--state STATE", "Filter by state") do |s|
    options[:state] = s
  end
  opts.on("-j", "Output in JSON") do |j|
    options[:json] = j
  end
end.parse!

compute = Fog::Compute.new(
  :provider => 'AWS',
  :aws_access_key_id => AwsOptions.access_key_id,
  :aws_secret_access_key => AwsOptions.secret_access_key
)

# apply basic filters
servers = compute.servers
servers.reject! { |s| s.state != options[:state] }

# process metdata filters, either key=value, or just value
ARGV.each do |arg|
  tokens = arg.split('=')
  tokens.unshift options[:default_key] if tokens.count == 1
  key, value = tokens
  servers.reject! { |s| !s.tags.key? key or s.tags[key] != value }
end

# output either json or lines
if options[:json]
  jj servers
else
  servers.each do |server|
    print server.dns_name
    print " => %s" % server.tags.inspect if options[:verbose]
    puts
  end
end

